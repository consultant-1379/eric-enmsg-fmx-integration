#!/usr/bin/env groovy

def defaultBobImage = 'armdocker.rnd.ericsson.se/sandbox/adp-staging/adp-cicd/bob.2.0:1.5.0-1'
def bob = new BobCommand()
        .bobImage(defaultBobImage)
        .envVars([ISO_VERSION: '${ISO_VERSION}', REDIS_E2E_VERSION: '${REDIS_E2E_VERSION}', REDIS_OPERATOR_VERSION: '${REDIS_OPERATOR_VERSION}', REDIS_OPERAND_VERSION: '${REDIS_OPERAND_VERSION}'])
        .needDockerSocket(true)
        .toString()
def failedStage = ''

pipeline {
    agent {
        label 'Cloud_Native_Dev'
    }

    stages {
        stage('Resolve Redis operator and operand versions') {
            steps {
                script {
                    env.REDIS_OPERATOR_VERSION = env.REDIS_E2E_VERSION
                    env.REDIS_OPERAND_VERSION = env.REDIS_E2E_VERSION.replace('+', '-')

                    println "REDIS_E2E_VERSION: ${env.REDIS_E2E_VERSION}"
                    println "REDIS_OPERATOR_VERSION: ${env.REDIS_OPERATOR_VERSION}"
                    println "REDIS_OPERAND_VERSION: ${env.REDIS_OPERAND_VERSION}"
                }
            }
            post {
                failure {
                    script {
                        failedStage = env.STAGE_NAME
                    }
                }
            }
        }

        stage('Checkout Repo') {
            steps {
                git branch: 'master',
                        credentialsId: 'lciadm100_private_key',
                        url: '${GERRIT_MIRROR}/' + env.REPO
                sh '''
                    git remote set-url origin --push ${GERRIT_CENTRAL}/${REPO}
                '''
            }
            post {
                failure {
                    script {
                        failedStage = env.STAGE_NAME
                    }
                }
            }
        }

        stage('Create Gerrit change for Key Value Database RD PRA Release') {
            steps {
                script {
                    sh "git branch"
                    sh "${bob} -r ruleset2.0.yaml update-fmx-integration-chart"
                    sh 'git add chart/eric-enmsg-fmx-integration/Chart.yaml'
                    sh "git commit -m 'NO-JIRA: Update Key Value Database RD to latest PRA version: ${env.REDIS_E2E_VERSION}'"
                    sh 'gitdir=$(git rev-parse --git-dir); scp -p -P 29418 lciadm100@gerrit.ericsson.se:hooks/commit-msg ${gitdir}/hooks/'
                    sh 'git commit -as --amend --no-edit'
                    sh 'git push origin HEAD:refs/for/master'
                    GERRIT_HEAD = sh(returnStdout: true, script: 'git rev-parse HEAD').trim()

                    GERRIT_URL = sh(returnStdout: true, script: "ssh -p ${env.GERRIT_PORT} ${env.GERRIT_SERVER} gerrit query project:${env.GERRIT_PROJ} ${GERRIT_HEAD} | grep url | awk '{print \$2}'").trim()
                    sh "ssh -p ${env.GERRIT_PORT} ${env.GERRIT_SERVER} gerrit review ${GERRIT_HEAD} --label Code-Review=+2"
                    echo "Patchset URL: ${GERRIT_URL}"
                }

            }
            post {
                success {
                    mail to: 'PDLNMFEATU@pdl.internal.ericsson.com, teamgor@tcscomprod.onmicrosoft.com',
                            subject: "Code review | Key Value Database RD to PRA version ${env.REDIS_E2E_VERSION}",
                            body: "Automated testing for the latest PRA version of the Key Value Database RD has completed successfully.\n\n" +
                                    "The following gerrit change has been generated based on this latest version and has been +2'd: ${GERRIT_URL} \n\n" +
                                    "Please proceed to deliver this to the maintrack delivery queue."
                }
            }
        }
    }
    post {
        cleanup {
            deleteDir()
        }
    }
}

import groovy.transform.builder.Builder
import groovy.transform.builder.SimpleStrategy

@Builder(builderStrategy = SimpleStrategy, prefix = '')
class BobCommand {
    def bobImage = 'bob.2.0:latest'
    def jobName = ''
    def envVars = [:]
    def needDockerSocket = false

    String toString() {
        def env = envVars
                .collect({ entry -> "-e ${entry.key}=\"${entry.value}\"" })
                .join(' ')

        def cmd = """\
        |docker run
        |--init
        |--rm
        |--workdir \${PWD}
        |--user \$(id -u):\$(id -g)
        |-v \${PWD}:\${PWD}
        |-v /etc/group:/etc/group:ro
        |-v /etc/passwd:/etc/passwd:ro
        |-v \${HOME}/.m2:\${HOME}/.m2
        |-v \${HOME}/.docker:\${HOME}/.docker
        |${needDockerSocket ? '-v /var/run/docker.sock:/var/run/docker.sock' : ''}
        |${env}
        |\$(for group in \$(id -G); do printf ' --group-add %s' "\$group"; done)
        |--group-add \$(stat -c '%g' /var/run/docker.sock)
        |${bobImage}
        |"""
        return cmd
                .stripMargin()           // remove indentation
                .replace('\n', ' ')      // join lines
                .replaceAll(/[ ]+/, ' ') // replace multiple spaces by one
    }
}