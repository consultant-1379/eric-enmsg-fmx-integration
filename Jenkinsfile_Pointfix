/* IMPORTANT:
*
* In order to make this pipeline work, the following configuration on Jenkins is required:
* - slave with a specific label (see pipeline.agent.label below)
* - credentials plugin should be installed and have the secrets with the following names:
*   + lciadm100credentials (token to access Artifactory)
*/

def defaultBobImage = 'armdocker.rnd.ericsson.se/proj-adp-cicd-drop/bob.2.0:1.7.0-54'
def bob = new BobCommand()
        .bobImage(defaultBobImage)
        .envVars([ISO_VERSION: '${ISO_VERSION}', PRODUCT_SET: '${PRODUCT_SET}', SPRINT_TAG: '${SPRINT_TAG}'])
        .needDockerSocket(true)
        .toString()

def bobInCA = new BobCommand()
        .bobImage(defaultBobImage)
        .needDockerSocket(true)
        .envVars([
        ARM_API_TOKEN     : '${ARM_CREDENTIALS_PSW}',
        REQUIREMENTS_FILE : '${REQUIREMENTS_FILE}',
        CHART_PATH        : '${CHART_PATH}',
        GIT_REPO_URL      : '${GIT_REPO_URL}',
        HELM_INTERNAL_REPO: '${HELM_INTERNAL_REPO}',
        HELM_DROP_REPO    : '${HELM_DROP_REPO}',
        HELM_RELEASED_REPO: '${HELM_RELEASED_REPO}',
        GERRIT_USERNAME   : '${GERRIT_CREDENTIALS_USR}',
        GERRIT_PASSWORD   : '${GERRIT_CREDENTIALS_PSW}',
        GIT_BRANCH        : '${BRANCH}',
	HELM_REPO_CREDENTIALS : '${HELM_REPO_CREDENTIALS}'
])
        .toString()


def GIT_COMMITTER_NAME = 'enmadm100'
def GIT_COMMITTER_EMAIL = 'enmadm100@ericsson.com'


pipeline {
    agent {
        label 'Cloud-Native-Pointfix'
    }
    parameters {
        string(name: 'SPRINT_TAG', description: 'Tag for GIT tagging the repository after build')
    }
    environment {
        GERRIT_CREDENTIALS = credentials('cenmbuild_gerrit_api_token')
        ARM_CREDENTIALS = credentials('cenmbuild_ARM_token')
        CHART_PATH = "chart/eric-enmsg-fmx-integration"
        REPO = "OSS/ENM-Parent/SQ-Gate/com.ericsson.oss.containerisation/eric-enmsg-fmx-integration"
        GIT_REPO_URL = "${GERRIT_CENTRAL_HTTP}/a/${REPO}"
        HELM_INTERNAL_REPO = "https://arm.epk.ericsson.se/artifactory/proj-enm-dev-internal-helm/"
        HELM_DROP_REPO = "https://arm.epk.ericsson.se/artifactory/proj-enm-dev-internal-helm/"
        HELM_RELEASED_REPO = "https://arm.epk.ericsson.se/artifactory/proj-enm-dev-internal-helm/"
    }
    stages {
        stage('Clean workspace') {
            steps {
                deleteDir()
            }
        }
        stage('Checkout Cloud-Native Git Repository') {
            steps {
                git branch: env.BRANCH,
                        url: '${GERRIT_MIRROR}/OSS/ENM-Parent/SQ-Gate/com.ericsson.oss.containerisation/eric-enmsg-fmx-integration'
                sh '''
                 git remote set-url origin --push ${GERRIT_CENTRAL}/${REPO}
                   '''
            }
        }

        stage('Lint Helm') {
            steps {
                sh "${bob} lint-only-helm"
            }
        }
        stage('Update versions in values.yaml file') {
            steps {
                echo sh(script: 'env', returnStdout: true)
                step([$class: 'CopyArtifact', projectName: 'sync-build-trigger-pointfix', filter: "*"]);
                sh "${bob} swap-latest-versions-with-numbers"
                sh '''
                    if git status | grep 'values.yaml' > /dev/null; then
                        git commit -m "NO JIRA - Updating Values.yaml files with version"
                        git push origin HEAD:${BRANCH}
                    fi
                '''
                //wait for gerrit sync
                checkGerritSync()
            }
        }

        stage('Publish Helm Chart') {
            steps {
                script {
                   withCredentials([file(credentialsId: 'cenm_repo_credentials', variable: 'HELM_REPO_CREDENTIALS')]){
                    sh "chmod -R 777 ${WORKSPACE}@tmp"
                    sh "${bobInCA} publishwithreq"
                    checkGerritSync()
                    }
                    archiveArtifacts 'artifact.properties'
                }
            }
        }
        stage('Update Patch Version') {
            steps {
                updatePatch('eric-enmsg-fmx-integration')
            }
        }
		stage('Update Requirements.yaml file') {
            steps {
                script {
                    sh '''
                            . ./artifact.properties
                            curl "${REQUIREMENTS_FILE}" -o requirements.yaml
                            echo '- name: eric-enmsg-fmx-integration' >> requirements.yaml
                            echo '  repository: https://arm.epk.ericsson.se/artifactory/proj-enm-dev-internal-helm/' >> requirements.yaml
                            echo '  version: '${INT_CHART_VERSION} >> requirements.yaml
                            curl -u \${ARM_CREDENTIALS} -X PUT -T requirements.yaml ${REQUIREMENTS_FILE}
                       '''
                }
            }
        }
    }
    post {
        failure {
            mail to: 'EricssonHyderabad.ENMMisty@tcs.com,EricssonHyderabad.ENMDewdrops@tcs.com',
                    subject: "Failed Pipeline: ${currentBuild.fullDisplayName}",
                    body: "Failure on ${env.BUILD_URL}"
                    sh "tar -zcf .bob/tmp_repo.tgz .bob/tmp_repo"
                    archiveArtifacts '.bob/tmp_repo.tgz'
        }
    }
}

def checkGerritSync() {
    sh '''
        RETRY=10
        SLEEP=60

        if [ -z ${BRANCH+x} ]; then
            echo "BRANCH is unset using master"
            branch="master"
        else
            echo "Using branch '$BRANCH'"
            branch=${BRANCH}
        fi

        retry=0
        while (( retry < RETRY )); do
            echo "INFO: Attempting retry #$((retry+1)) of $RETRY in $SLEEP seconds."
            # get the commit ID's on GC master and mirror
            echo "INFO: Checking commit ID's for '$branch' branch on Gerrit Central."
            gcr=$(git ls-remote -h ${GERRIT_CENTRAL}/${REPO} ${branch} | awk '{print $1}')
            gmr=$(git ls-remote -h ${GERRIT_MIRROR}/${REPO} ${branch} | awk '{print $1}')
            echo "INFO: central: ${gcr}"
            echo "INFO: mirror:  ${gmr}"
                if [[ "${gcr}" != "${gmr}" ]]; then
                    echo "INFO: Gerrit central and mirror are out of sync."
                    let "retry=retry+1"
                    if [[ "${retry}" == "${RETRY}" ]]; then
                        echo "Gerrit mirror not in sync with central"
                        exit 1
                    else
                        echo "Waiting for sync...."
                        sleep $SLEEP
                    fi
                else
                    break
                fi
       done
       local_head=$(git rev-parse HEAD)
       [ "${local_head}" != "${gmr}" ] && echo -e "Fetching upstream changes" && git pull origin ${branch}
       echo "INFO: Branch in sync between Gerrit central and mirror."
       '''
}

// More about @Builder: http://mrhaki.blogspot.com/2014/05/groovy-goodness-use-builder-ast.html
import groovy.transform.builder.Builder
import groovy.transform.builder.SimpleStrategy

@Builder(builderStrategy = SimpleStrategy, prefix = '')
class BobCommand {
    def bobImage = 'bob.2.0:latest'
    def envVars = [:]
    def needDockerSocket = false

    String toString() {
        def env = envVars
                .collect({ entry -> "-e ${entry.key}=\"${entry.value}\"" })
                .join(' ')

        def cmd = """\
                    |docker run
                    |--init
                    |--rm
                    |--workdir \${PWD}
                    |--user \$(id -u):\$(id -g)
                    |-v \${PWD}:\${PWD}
                    |-v /etc/group:/etc/group:ro
                    |-v /etc/passwd:/etc/passwd:ro
                    |-v \${HOME}/.m2:\${HOME}/.m2
                    |-v \${HOME}/.docker:\${HOME}/.docker
                    |\$(if [ -n "\$HELM_REPO_CREDENTIALS" ]; then echo -v \$HELM_REPO_CREDENTIALS:\$HELM_REPO_CREDENTIALS;fi)
		    |${needDockerSocket ? '-v /var/run/docker.sock:/var/run/docker.sock' : ''}
                    |${env}
                    |\$(for group in \$(id -G); do printf ' --group-add %s' "\$group"; done)
                    |--group-add \$(stat -c '%g' /var/run/docker.sock)
                    |${bobImage}
                    |"""
        return cmd
                .stripMargin()           // remove indentation
                .replace('\n', ' ')      // join lines
                .replaceAll(/[ ]+/, ' ') // replace multiple spaces by one
    }
}
def updatePatch(artifact_id) {
    env.ARTIFACT_ID=artifact_id
    sh '''
        #!/bin/bash
        git config pull.ff only
        git pull origin ${BRANCH}
        CHART_DETAILS=$(cat -n chart/${ARTIFACT_ID}/Chart.yaml | sed -n '/'"${ARTIFACT_ID}"'/,$p' | grep version | head -1 | sed 's/version: //g')
        CHART_LINE=$(echo $CHART_DETAILS | tr -s ' ' | cut -d ' ' -f 1)
        CHART_VERSION_PREFIX=$(echo $CHART_DETAILS | tr -s ' ' | cut -d ' ' -f 2)
        CHART_VERSION=$(echo $CHART_VERSION_PREFIX | sed 's/-.*$//')

        CHART_MAJOR_VERSION=$(echo ${CHART_VERSION} | awk -F"." '{print $1}')
        CHART_MINOR_VERSION=$(echo ${CHART_VERSION} | awk -F"." '{print $2}')
        CHART_PATCH_VERSION=$(echo ${CHART_VERSION} | awk -F"." '{print $3}')

        CHART_PATCH_VERSION_1=$(expr ${CHART_PATCH_VERSION} + 1)
        NEW_VERSION="${CHART_MAJOR_VERSION}.${CHART_MINOR_VERSION}.${CHART_PATCH_VERSION_1}"

        echo "${NEW_VERSION}" > VERSION_PREFIX

        sed -i "${CHART_LINE}"'s/'"${CHART_VERSION_PREFIX}"'/'"${NEW_VERSION}-1"'/' chart/${ARTIFACT_ID}/Chart.yaml
        git add VERSION_PREFIX chart/${ARTIFACT_ID}/Chart.yaml
        git commit -m "[ci-build] Automatic new patch version bumping: ${NEW_VERSION}"
        git push origin ${BRANCH}
    '''
}

